{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nvar _jsxFileName = \"/home/user/mb-frontend/components/block/Form.js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState, useEffect } from 'react';\nimport Proptypes from 'prop-types';\nimport { getFormbuilderByIdService } from '../../services/form';\nimport { map } from 'lodash';\nimport ReactHtmlParser from 'react-html-parser';\nimport { Button, FormGroup, Input } from 'reactstrap';\nvar propTypes = {\n  data: Proptypes.object.isRequired,\n  getPageBlock: Proptypes.func\n};\n\nfunction Form(_ref) {\n  var data = _ref.data;\n\n  var _useState = useState([]),\n      formdata = _useState[0],\n      setFormData = _useState[1];\n\n  var _useState2 = useState({}),\n      formState = _useState2[0],\n      setFormState = _useState2[1];\n\n  var getFormByID = function getFormByID() {\n    var res;\n    return _regeneratorRuntime.async(function getFormByID$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(getFormbuilderByIdService(data.formdata));\n\n          case 2:\n            res = _context.sent;\n\n            if (res && res.status === 200) {\n              setFormData(JSON.parse(res.data.list));\n            }\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    });\n  };\n\n  useEffect(function () {\n    getFormByID();\n  }, []);\n\n  var handleChange = function handleChange(event) {\n    event.persist();\n    setFormState(function (formState) {\n      return _objectSpread({}, formState, _defineProperty({}, event.target.name, event.target.value));\n    });\n  };\n\n  console.log(formState);\n  return __jsx(\"section\", {\n    className: \"sec-tb\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }, __jsx(\"div\", {\n    className: \"container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }, __jsx(\"div\", {\n    className: \"max750\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }, map(formdata, function (item, index) {\n    if (item.type === 'header') {\n      return __jsx(React.Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43\n        },\n        __self: this\n      }, __jsx(\"div\", {\n        className: \"max600 entry-head text-center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        },\n        __self: this\n      }, ReactHtmlParser(item.label)));\n    }\n\n    if (item.type === 'paragraph') {\n      return __jsx(\"p\", {\n        className: item.className,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        },\n        __self: this\n      }, ReactHtmlParser(item.label));\n    }\n\n    if (item.type === 'radio-group') {\n      return __jsx(\"div\", {\n        className: \"mb-30 text-center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53\n        },\n        __self: this\n      }, map(item.values, function (items, key) {\n        return __jsx(\"label\", {\n          className: \"radio\",\n          key: key,\n          style: {\n            marginLeft: '20px'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 55\n          },\n          __self: this\n        }, __jsx(\"input\", {\n          type: \"radio\",\n          name: \"check1\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 56\n          },\n          __self: this\n        }), __jsx(\"span\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 57\n          },\n          __self: this\n        }), items.label);\n      }));\n    }\n\n    if (item.type === 'text') {\n      return __jsx(React.Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }, __jsx(\"div\", {\n        className: \"col-12\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      }, __jsx(\"label\", {\n        className: \"block\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      }, __jsx(\"span\", {\n        className: \"title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }, item.label), __jsx(Input, {\n        className: \"input\",\n        name: item.name,\n        type: \"text\",\n        placeholder: item.placeholder,\n        style: {\n          width: '100%'\n        },\n        onChange: function onChange(e) {\n          return handleChange(e);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      }))));\n    }\n\n    if (item.type === 'textarea') {\n      return __jsx(React.Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85\n        },\n        __self: this\n      }, __jsx(\"div\", {\n        className: \"col-12\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86\n        },\n        __self: this\n      }, __jsx(\"label\", {\n        className: \"block\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87\n        },\n        __self: this\n      }, __jsx(\"span\", {\n        className: \"title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      }, item.label, \"(\", __jsx(\"span\", {\n        className: \"require\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      }, \"*\"), \")\"), __jsx(\"textarea\", {\n        className: \"input\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }))));\n    }\n\n    if (item.type === 'button') {\n      return __jsx(React.Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }, __jsx(\"div\", {\n        className: \"col-12 text-center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        },\n        __self: this\n      }, __jsx(\"button\", {\n        className: \"btn\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      }, item.label)));\n    }\n  }))));\n}\n\nForm.propTypes = propTypes;\nexport default Form;","map":{"version":3,"sources":["/home/user/mb-frontend/components/block/Form.js"],"names":["React","useState","useEffect","Proptypes","getFormbuilderByIdService","map","ReactHtmlParser","Button","FormGroup","Input","propTypes","data","object","isRequired","getPageBlock","func","Form","formdata","setFormData","formState","setFormState","getFormByID","res","status","JSON","parse","list","handleChange","event","persist","target","name","value","console","log","item","index","type","label","className","values","items","key","marginLeft","placeholder","width","e"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Proptypes from 'prop-types';\nimport { getFormbuilderByIdService } from '../../services/form';\nimport { map } from 'lodash';\nimport ReactHtmlParser from 'react-html-parser';\nimport { Button, FormGroup, Input } from 'reactstrap';\n\nconst propTypes = {\n  data: Proptypes.object.isRequired,\n  getPageBlock: Proptypes.func\n};\n\nfunction Form({ data }) {\n  const [formdata, setFormData] = useState([]);\n  const [formState, setFormState] = useState({});\n  const getFormByID = async () => {\n    const res = await getFormbuilderByIdService(data.formdata);\n    if (res && res.status === 200) {\n      setFormData(JSON.parse(res.data.list));\n    }\n  };\n\n  useEffect(() => {\n    getFormByID();\n  }, []);\n\n  const handleChange = event => {\n    event.persist();\n    setFormState(formState => ({\n      ...formState,\n      [event.target.name]: event.target.value\n    }));\n  };\n\n  console.log(formState);\n  return (\n    <section className=\"sec-tb\">\n      <div className=\"container\">\n        <div className=\"max750\">\n          {map(formdata, (item, index) => {\n            if (item.type === 'header') {\n              return (\n                <React.Fragment>\n                  <div className=\"max600 entry-head text-center\">{ReactHtmlParser(item.label)}</div>\n                </React.Fragment>\n              );\n            }\n            if (item.type === 'paragraph') {\n              return <p className={item.className}>{ReactHtmlParser(item.label)}</p>;\n            }\n            if (item.type === 'radio-group') {\n              return (\n                <div className=\"mb-30 text-center\">\n                  {map(item.values, (items, key) => (\n                    <label className=\"radio\" key={key} style={{ marginLeft: '20px' }}>\n                      <input type=\"radio\" name=\"check1\" />\n                      <span></span>\n                      {items.label}\n                    </label>\n                  ))}\n                </div>\n              );\n            }\n            if (item.type === 'text') {\n              return (\n                <React.Fragment>\n                  <div className=\"col-12\">\n                    <label className=\"block\">\n                      <span className=\"title\">{item.label}</span>\n                      <Input\n                        className=\"input\"\n                        name={item.name}\n                        type=\"text\"\n                        placeholder={item.placeholder}\n                        style={{ width: '100%' }}\n                        onChange={e => handleChange(e)}\n                      />\n                    </label>\n                  </div>\n                </React.Fragment>\n              );\n            }\n            if (item.type === 'textarea') {\n              return (\n                <React.Fragment>\n                  <div className=\"col-12\">\n                    <label className=\"block\">\n                      <span className=\"title\">\n                        {item.label}(<span className=\"require\">*</span>)\n                      </span>\n                      <textarea className=\"input\"></textarea>\n                    </label>\n                  </div>\n                </React.Fragment>\n              );\n            }\n            if (item.type === 'button') {\n              return (\n                <React.Fragment>\n                  <div className=\"col-12 text-center\">\n                    <button className=\"btn\">{item.label}</button>\n                  </div>\n                </React.Fragment>\n              );\n            }\n          })}\n        </div>\n      </div>\n    </section>\n  );\n}\n\nForm.propTypes = propTypes;\n\nexport default Form;\n"]},"metadata":{},"sourceType":"module"}