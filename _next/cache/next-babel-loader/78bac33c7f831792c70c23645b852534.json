{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport actions from './actions';\nimport { takeLatest, put, all, fork } from 'redux-saga/effects';\nimport { getMenuItemByPosition } from '../../services/menu';\n\nconst nest = (items, id = null, link = 'parentId') => {\n  return items.filter(item => item[link] === id).map(item => _objectSpread({}, item, {\n    title: `${item.name}`,\n    children: nest(items.sort((a, b) => a.position - b.position), item.id),\n    expanded: true\n  }));\n};\n\nfunction* getMenuHeaderSaga() {\n  yield takeLatest(actions.GET_MENU_HEADER_REQUEST, function* () {\n    try {\n      const res = yield getMenuItemByPosition('top_top');\n\n      if (res.status === 200) {\n        yield put({\n          type: actions.GET_MENU_HEADER_RESPONSE,\n          data: nest(res.data.menuItems)\n        });\n      } else {// console.log(res);\n      }\n    } catch (error) {// console.log(error);\n    }\n  });\n}\n\nfunction* getMenuNavSaga() {\n  yield takeLatest(actions.GET_MENU_NAV_REQUEST, function* () {\n    try {\n      const res = yield getMenuItemByPosition('top2');\n\n      if (res.status === 200) {\n        yield put({\n          type: actions.GET_MENU_NAV_RESPONSE,\n          data: nest(res.data.menuItems)\n        });\n      } else {// console.log(res);\n      }\n    } catch (error) {// console.log(error);\n    }\n  });\n}\n\nfunction* getMenuFooterTopSaga() {\n  yield takeLatest(actions.GET_MENU_FOOTER_TOP_REQUEST, function* () {\n    try {\n      const res = yield getMenuItemByPosition('Menu footer top');\n\n      if (res.status === 200) {\n        yield put({\n          type: actions.GET_MENU_FOOTER_TOP_RESPONSE,\n          data: nest(res.data.menuItems)\n        });\n      } else {// console.log(res);\n      }\n    } catch (error) {// console.log(error);\n    }\n  });\n}\n\nfunction* getMenuFooterMainSaga() {\n  yield takeLatest(actions.GET_MENU_FOOTER_MAIN_REQUEST, function* () {\n    try {\n      const res = yield getMenuItemByPosition('Menu footer main');\n\n      if (res.status === 200) {\n        yield put({\n          type: actions.GET_MENU_FOOTER_MAIN_RESPONSE,\n          data: nest(res.data.menuItems)\n        });\n      } else {// console.log(res);\n      }\n    } catch (error) {// console.log(error);\n    }\n  });\n}\n\nfunction* getMenuFooterBottomSaga() {\n  yield takeLatest(actions.GET_MENU_FOOTER_BOTTOM_REQUEST, function* () {\n    try {\n      const res = yield getMenuItemByPosition('menu footer bottom');\n\n      if (res.status === 200) {\n        yield put({\n          type: actions.GET_MENU_FOOTER_BOTTOM_RESPONSE,\n          data: nest(res.data.menuItems)\n        });\n      } else {// console.log(res);\n      }\n    } catch (error) {// console.log(error);\n    }\n  });\n}\n\nexport default function* rootSaga() {\n  yield all([fork(getMenuHeaderSaga), fork(getMenuNavSaga), fork(getMenuFooterTopSaga), fork(getMenuFooterMainSaga), fork(getMenuFooterBottomSaga)]);\n}","map":{"version":3,"sources":["/home/user/mb-frontend/store/menu/saga.js"],"names":["actions","takeLatest","put","all","fork","getMenuItemByPosition","nest","items","id","link","filter","item","map","title","name","children","sort","a","b","position","expanded","getMenuHeaderSaga","GET_MENU_HEADER_REQUEST","res","status","type","GET_MENU_HEADER_RESPONSE","data","menuItems","error","getMenuNavSaga","GET_MENU_NAV_REQUEST","GET_MENU_NAV_RESPONSE","getMenuFooterTopSaga","GET_MENU_FOOTER_TOP_REQUEST","GET_MENU_FOOTER_TOP_RESPONSE","getMenuFooterMainSaga","GET_MENU_FOOTER_MAIN_REQUEST","GET_MENU_FOOTER_MAIN_RESPONSE","getMenuFooterBottomSaga","GET_MENU_FOOTER_BOTTOM_REQUEST","GET_MENU_FOOTER_BOTTOM_RESPONSE","rootSaga"],"mappings":"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","sourcesContent":["import actions from './actions';\nimport { takeLatest, put, all, fork } from 'redux-saga/effects';\nimport { getMenuItemByPosition } from '../../services/menu';\n\nconst nest = (items, id = null, link = 'parentId') => {\n  return items\n    .filter(item => item[link] === id)\n    .map(item => ({\n      ...item,\n      title: `${item.name}`,\n      children: nest(\n        items.sort((a, b) => a.position - b.position),\n        item.id\n      ),\n      expanded: true\n    }));\n};\n\nfunction* getMenuHeaderSaga() {\n  yield takeLatest(actions.GET_MENU_HEADER_REQUEST, function*() {\n    try {\n      const res = yield getMenuItemByPosition('top_top');\n      if (res.status === 200) {\n        yield put({\n          type: actions.GET_MENU_HEADER_RESPONSE,\n          data: nest(res.data.menuItems)\n        });\n      } else {\n        // console.log(res);\n      }\n    } catch (error) {\n      // console.log(error);\n    }\n  });\n}\n\nfunction* getMenuNavSaga() {\n  yield takeLatest(actions.GET_MENU_NAV_REQUEST, function*() {\n    try {\n      const res = yield getMenuItemByPosition('top2');\n      if (res.status === 200) {\n        yield put({\n          type: actions.GET_MENU_NAV_RESPONSE,\n          data: nest(res.data.menuItems)\n        });\n      } else {\n        // console.log(res);\n      }\n    } catch (error) {\n      // console.log(error);\n    }\n  });\n}\n\nfunction* getMenuFooterTopSaga() {\n  yield takeLatest(actions.GET_MENU_FOOTER_TOP_REQUEST, function*() {\n    try {\n      const res = yield getMenuItemByPosition('Menu footer top');\n      if (res.status === 200) {\n        yield put({\n          type: actions.GET_MENU_FOOTER_TOP_RESPONSE,\n          data: nest(res.data.menuItems)\n        });\n      } else {\n        // console.log(res);\n      }\n    } catch (error) {\n      // console.log(error);\n    }\n  });\n}\n\nfunction* getMenuFooterMainSaga() {\n  yield takeLatest(actions.GET_MENU_FOOTER_MAIN_REQUEST, function*() {\n    try {\n      const res = yield getMenuItemByPosition('Menu footer main');\n      if (res.status === 200) {\n        yield put({\n          type: actions.GET_MENU_FOOTER_MAIN_RESPONSE,\n          data: nest(res.data.menuItems)\n        });\n      } else {\n        // console.log(res);\n      }\n    } catch (error) {\n      // console.log(error);\n    }\n  });\n}\n\nfunction* getMenuFooterBottomSaga() {\n  yield takeLatest(actions.GET_MENU_FOOTER_BOTTOM_REQUEST, function*() {\n    try {\n      const res = yield getMenuItemByPosition('menu footer bottom');\n      if (res.status === 200) {\n        yield put({\n          type: actions.GET_MENU_FOOTER_BOTTOM_RESPONSE,\n          data: nest(res.data.menuItems)\n        });\n      } else {\n        // console.log(res);\n      }\n    } catch (error) {\n      // console.log(error);\n    }\n  });\n}\n\nexport default function* rootSaga() {\n  yield all([\n    fork(getMenuHeaderSaga),\n    fork(getMenuNavSaga),\n    fork(getMenuFooterTopSaga),\n    fork(getMenuFooterMainSaga),\n    fork(getMenuFooterBottomSaga)\n  ]);\n}\n"]},"metadata":{},"sourceType":"module"}