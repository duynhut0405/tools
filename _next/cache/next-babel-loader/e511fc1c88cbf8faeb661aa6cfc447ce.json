{"ast":null,"code":"import actions from './actions';\nimport { takeLatest, put, all, fork } from 'redux-saga/effects';\nimport { fillRegulationServices, getTypeRegulationServices, getUrlVideoService, getRegulationPagation, getRegulationListYear, getTypeRegulationByIDServices } from '../../services/regulation';\n\nfunction* getRegulationSaga() {\n  yield takeLatest(actions.GET_REGULATION_PAGINATION_REQUEST, function* (params) {\n    const {\n      types,\n      year,\n      page\n    } = params;\n\n    try {\n      const res = yield getRegulationPagation(types, year, page);\n\n      if (res.status === 200) {\n        yield put({\n          type: actions.GET_REGULATION_PAGINATION_RESPONSE,\n          data: res.data\n        });\n      } else {// console.log(res);\n      }\n    } catch (error) {// console.log(error);\n    }\n  });\n}\n\nfunction* searchRegulationSaga() {\n  yield takeLatest(actions.SEARCH_REGULATION_REQUEST, function* (params) {\n    const {\n      data\n    } = params;\n\n    try {\n      const res = yield fillRegulationServices(data);\n\n      if (res.status === 200) {\n        yield put({\n          type: actions.SEARCH_REGULATION_RESPONSE,\n          data: res.data\n        });\n      } else {// console.log(res);\n      }\n    } catch (error) {// console.log(error);\n    }\n  });\n}\n\nfunction* getTypeRegulationSaga() {\n  yield takeLatest(actions.GET_TYPE_REGULATION_REQUEST, function* () {\n    try {\n      const res = yield getTypeRegulationServices();\n\n      if (res.status === 200) {\n        yield put({\n          type: actions.GET_TYPE_REGULATION_RESPONSE,\n          data: res.data\n        });\n      } else {// console.log(res);\n      }\n    } catch (error) {// console.log(error);\n    }\n  });\n}\n\nfunction* getTypeRegulationByIDSaga() {\n  yield takeLatest(actions.GET_TYPE_REGULATION_BY_ID_REQUEST, function* (params) {\n    const {\n      id\n    } = params;\n\n    try {\n      const res = yield getTypeRegulationByIDServices(id);\n\n      if (res.status === 200) {\n        yield put({\n          type: actions.GET_TYPE_REGULATION_BY_ID_RESPONSE,\n          data: res.data\n        });\n      } else {// console.log(res);\n      }\n    } catch (error) {// console.log(error);\n    }\n  });\n}\n\nfunction* getUrlVideoSaga() {\n  yield takeLatest(actions.GET_URL_VIDEO_REQUEST, function* (params) {\n    const {\n      data\n    } = params;\n\n    try {\n      const res = yield getUrlVideoService(data);\n\n      if (res.status === 200) {\n        yield put({\n          type: actions.GET_URL_VIDEO_RESPONSE,\n          data: res.data\n        });\n      } else {// console.log(res);\n      }\n    } catch (error) {// console.log(error);\n    }\n  });\n}\n\nfunction* getRegulationByYearSaga() {\n  yield takeLatest(actions.GET_REGULATION_BY_YEAR_REQUEST, function* (params) {\n    const {\n      types,\n      detailTypeId,\n      number,\n      page,\n      year\n    } = params;\n\n    try {\n      const res = yield getRegulationListYear(types, detailTypeId, number, page, year);\n\n      if (res.status === 200) {\n        yield put({\n          type: actions.GET_REGULATION_BY_YEAR_RESPONSE,\n          data: res.data\n        });\n      } else {// console.log(res);\n      }\n    } catch (error) {// console.log(error);\n    }\n  });\n}\n\nexport default function* rootSaga() {\n  yield all([fork(searchRegulationSaga), fork(getTypeRegulationSaga), fork(getUrlVideoSaga), fork(getRegulationSaga), fork(getRegulationByYearSaga), fork(getTypeRegulationByIDSaga)]);\n}","map":null,"metadata":{},"sourceType":"module"}