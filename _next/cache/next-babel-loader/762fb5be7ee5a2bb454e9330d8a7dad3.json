{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport Actions from './actions';\nconst initialState = {\n  listBranches: [],\n  listProvince: [],\n  listDistrict: []\n};\n\nconst mapReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case Actions.SEARCH_BRANCHES_RESPONSE:\n      return _objectSpread({}, state, {\n        listBranches: action.data\n      });\n\n    case Actions.GET_PROVINCE_RESPONSE:\n      return _objectSpread({}, state, {\n        listProvince: action.data\n      });\n\n    case Actions.GET_DISTRICT_RESPONSE:\n      return _objectSpread({}, state, {\n        listDistrict: action.data\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default mapReducer;","map":{"version":3,"sources":["/home/user/mb-frontend/store/map/reducers.js"],"names":["Actions","initialState","listBranches","listProvince","listDistrict","mapReducer","state","action","type","SEARCH_BRANCHES_RESPONSE","data","GET_PROVINCE_RESPONSE","GET_DISTRICT_RESPONSE"],"mappings":";;;;;;AAAA,OAAOA,OAAP,MAAoB,WAApB;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,YAAY,EAAE,EADK;AAEnBC,EAAAA,YAAY,EAAE,EAFK;AAGnBC,EAAAA,YAAY,EAAE;AAHK,CAArB;;AAMA,MAAMC,UAAU,GAAG,CAACC,KAAK,GAAGL,YAAT,EAAuBM,MAAvB,KAAkC;AACnD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKR,OAAO,CAACS,wBAAb;AACE,+BACKH,KADL;AAEEJ,QAAAA,YAAY,EAAEK,MAAM,CAACG;AAFvB;;AAIF,SAAKV,OAAO,CAACW,qBAAb;AACE,+BACKL,KADL;AAEEH,QAAAA,YAAY,EAAEI,MAAM,CAACG;AAFvB;;AAIF,SAAKV,OAAO,CAACY,qBAAb;AACE,+BACKN,KADL;AAEEF,QAAAA,YAAY,EAAEG,MAAM,CAACG;AAFvB;;AAIF;AACE,aAAOJ,KAAP;AAjBJ;AAmBD,CApBD;;AAsBA,eAAeD,UAAf","sourcesContent":["import Actions from './actions';\n\nconst initialState = {\n  listBranches: [],\n  listProvince: [],\n  listDistrict: []\n};\n\nconst mapReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case Actions.SEARCH_BRANCHES_RESPONSE:\n      return {\n        ...state,\n        listBranches: action.data\n      };\n    case Actions.GET_PROVINCE_RESPONSE:\n      return {\n        ...state,\n        listProvince: action.data\n      };\n    case Actions.GET_DISTRICT_RESPONSE:\n      return {\n        ...state,\n        listDistrict: action.data\n      };\n    default:\n      return state;\n  }\n};\n\nexport default mapReducer;\n"]},"metadata":{},"sourceType":"module"}