{"ast":null,"code":"import actions from './actions';\nimport { takeLatest, put, all, fork } from 'redux-saga/effects';\nimport { getPageService, getPagesByIdService } from '../../services/page';\nimport { filter } from 'lodash';\n\nfunction* pageSaga() {\n  yield takeLatest(actions.GET_HOME_REQUEST, function* (params) {\n    const {\n      name\n    } = params;\n\n    try {\n      const res = yield getPageService(name);\n\n      if (res.status === 200) {\n        let silder = [];\n        const silderData = yield filter(res.data.pageBlocks, item => item.name === 'Silder');\n\n        for (let i = 0; i < silderData.length; i++) {\n          silder = [...silder, ...JSON.parse(silderData[i].content)];\n        }\n\n        yield put({\n          type: actions.GET_HOME_RESPONSE,\n          data: res.data,\n          silder,\n          router: name\n        });\n      } else {// console.log(res);\n      }\n    } catch (error) {// console.log(error);\n    }\n  });\n}\n\nfunction* pagesBySaga() {\n  yield takeLatest(actions.GET_PAGES_BY_ID_REQUEST, function* (params) {\n    const {\n      data\n    } = params;\n\n    try {\n      const res = yield getPagesByIdService(data);\n\n      if (res.status === 200) {\n        yield put({\n          type: actions.GET_PAGES_BY_ID_RESPONSE,\n          data: res.data\n        });\n      } else {// console.log(res);\n      }\n    } catch (error) {// console.log(error);\n    }\n  });\n}\n\nexport default function* rootSaga() {\n  yield all([fork(pageSaga), fork(pagesBySaga)]);\n}","map":null,"metadata":{},"sourceType":"module"}