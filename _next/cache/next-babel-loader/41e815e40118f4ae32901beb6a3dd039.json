{"ast":null,"code":"import actions from './actions';\nimport { map } from 'lodash';\nimport { takeLatest, put, all, fork } from 'redux-saga/effects';\nimport { getProvinceService, getDistrictService, searchBranchesService } from '../../services/map';\n\nfunction* getProvinceSaga() {\n  yield takeLatest(actions.GET_PROVINCE_REQUEST, function* () {\n    try {\n      const res = yield getProvinceService();\n\n      if (res.status === 200) {\n        const data = map(res.data, province => ({\n          value: province.id,\n          label: province.name\n        }));\n        yield put({\n          type: actions.GET_PROVINCE_RESPONSE,\n          data: data\n        });\n      } else {// console.log(res);\n      }\n    } catch (error) {// console.log(error);\n    }\n  });\n}\n\nfunction* getDistrictSaga() {\n  yield takeLatest(actions.GET_DISTRICT_REQUEST, function* (params) {\n    const {\n      id\n    } = params;\n\n    try {\n      const res = yield getDistrictService(id);\n\n      if (res.status === 200) {\n        const data = map(res.data, district => ({\n          value: district.id,\n          label: district.name\n        }));\n        yield put({\n          type: actions.GET_DISTRICT_RESPONSE,\n          data: data\n        });\n      } else {// console.log(res);\n      }\n    } catch (error) {// console.log(error);\n    }\n  });\n}\n\nfunction* searchBranchesSaga() {\n  yield takeLatest(actions.SEARCH_BRANCHES_REQUEST, function* (params) {\n    try {\n      const res = yield searchBranchesService(params.params);\n\n      if (res.status === 200) {\n        yield put({\n          type: actions.SEARCH_BRANCHES_RESPONSE,\n          data: res.data\n        });\n      } else {// console.log(res);\n      }\n    } catch (error) {// console.log(error);\n    }\n  });\n}\n\nexport default function* rootSaga() {\n  yield all([fork(getProvinceSaga), fork(getDistrictSaga), fork(searchBranchesSaga)]);\n}","map":{"version":3,"sources":["/home/user/mb-frontend/store/map/saga.js"],"names":["actions","map","takeLatest","put","all","fork","getProvinceService","getDistrictService","searchBranchesService","getProvinceSaga","GET_PROVINCE_REQUEST","res","status","data","province","value","id","label","name","type","GET_PROVINCE_RESPONSE","error","getDistrictSaga","GET_DISTRICT_REQUEST","params","district","GET_DISTRICT_RESPONSE","searchBranchesSaga","SEARCH_BRANCHES_REQUEST","SEARCH_BRANCHES_RESPONSE","rootSaga"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,WAApB;AACA,SAASC,GAAT,QAAoB,QAApB;AACA,SAASC,UAAT,EAAqBC,GAArB,EAA0BC,GAA1B,EAA+BC,IAA/B,QAA2C,oBAA3C;AACA,SAASC,kBAAT,EAA6BC,kBAA7B,EAAiDC,qBAAjD,QAA8E,oBAA9E;;AAEA,UAAUC,eAAV,GAA4B;AAC1B,QAAMP,UAAU,CAACF,OAAO,CAACU,oBAAT,EAA+B,aAAY;AACzD,QAAI;AACF,YAAMC,GAAG,GAAG,MAAML,kBAAkB,EAApC;;AACA,UAAIK,GAAG,CAACC,MAAJ,KAAe,GAAnB,EAAwB;AACtB,cAAMC,IAAI,GAAGZ,GAAG,CAACU,GAAG,CAACE,IAAL,EAAWC,QAAQ,KAAK;AAAEC,UAAAA,KAAK,EAAED,QAAQ,CAACE,EAAlB;AAAsBC,UAAAA,KAAK,EAAEH,QAAQ,CAACI;AAAtC,SAAL,CAAnB,CAAhB;AACA,cAAMf,GAAG,CAAC;AAAEgB,UAAAA,IAAI,EAAEnB,OAAO,CAACoB,qBAAhB;AAAuCP,UAAAA,IAAI,EAAEA;AAA7C,SAAD,CAAT;AACD,OAHD,MAGO,CACL;AACD;AACF,KARD,CAQE,OAAOQ,KAAP,EAAc,CACd;AACD;AACF,GAZe,CAAhB;AAaD;;AAED,UAAUC,eAAV,GAA4B;AAC1B,QAAMpB,UAAU,CAACF,OAAO,CAACuB,oBAAT,EAA+B,WAAUC,MAAV,EAAkB;AAC/D,UAAM;AAAER,MAAAA;AAAF,QAASQ,MAAf;;AACA,QAAI;AACF,YAAMb,GAAG,GAAG,MAAMJ,kBAAkB,CAACS,EAAD,CAApC;;AACA,UAAIL,GAAG,CAACC,MAAJ,KAAe,GAAnB,EAAwB;AACtB,cAAMC,IAAI,GAAGZ,GAAG,CAACU,GAAG,CAACE,IAAL,EAAWY,QAAQ,KAAK;AAAEV,UAAAA,KAAK,EAAEU,QAAQ,CAACT,EAAlB;AAAsBC,UAAAA,KAAK,EAAEQ,QAAQ,CAACP;AAAtC,SAAL,CAAnB,CAAhB;AACA,cAAMf,GAAG,CAAC;AAAEgB,UAAAA,IAAI,EAAEnB,OAAO,CAAC0B,qBAAhB;AAAuCb,UAAAA,IAAI,EAAEA;AAA7C,SAAD,CAAT;AACD,OAHD,MAGO,CACL;AACD;AACF,KARD,CAQE,OAAOQ,KAAP,EAAc,CACd;AACD;AACF,GAbe,CAAhB;AAcD;;AAED,UAAUM,kBAAV,GAA+B;AAC7B,QAAMzB,UAAU,CAACF,OAAO,CAAC4B,uBAAT,EAAkC,WAAUJ,MAAV,EAAkB;AAClE,QAAI;AACF,YAAMb,GAAG,GAAG,MAAMH,qBAAqB,CAACgB,MAAM,CAACA,MAAR,CAAvC;;AACA,UAAIb,GAAG,CAACC,MAAJ,KAAe,GAAnB,EAAwB;AACtB,cAAMT,GAAG,CAAC;AAAEgB,UAAAA,IAAI,EAAEnB,OAAO,CAAC6B,wBAAhB;AAA0ChB,UAAAA,IAAI,EAAEF,GAAG,CAACE;AAApD,SAAD,CAAT;AACD,OAFD,MAEO,CACL;AACD;AACF,KAPD,CAOE,OAAOQ,KAAP,EAAc,CACd;AACD;AACF,GAXe,CAAhB;AAYD;;AAED,eAAe,UAAUS,QAAV,GAAqB;AAClC,QAAM1B,GAAG,CAAC,CAACC,IAAI,CAACI,eAAD,CAAL,EAAwBJ,IAAI,CAACiB,eAAD,CAA5B,EAA+CjB,IAAI,CAACsB,kBAAD,CAAnD,CAAD,CAAT;AACD","sourcesContent":["import actions from './actions';\nimport { map } from 'lodash';\nimport { takeLatest, put, all, fork } from 'redux-saga/effects';\nimport { getProvinceService, getDistrictService, searchBranchesService } from '../../services/map';\n\nfunction* getProvinceSaga() {\n  yield takeLatest(actions.GET_PROVINCE_REQUEST, function*() {\n    try {\n      const res = yield getProvinceService();\n      if (res.status === 200) {\n        const data = map(res.data, province => ({ value: province.id, label: province.name }));\n        yield put({ type: actions.GET_PROVINCE_RESPONSE, data: data });\n      } else {\n        // console.log(res);\n      }\n    } catch (error) {\n      // console.log(error);\n    }\n  });\n}\n\nfunction* getDistrictSaga() {\n  yield takeLatest(actions.GET_DISTRICT_REQUEST, function*(params) {\n    const { id } = params;\n    try {\n      const res = yield getDistrictService(id);\n      if (res.status === 200) {\n        const data = map(res.data, district => ({ value: district.id, label: district.name }));\n        yield put({ type: actions.GET_DISTRICT_RESPONSE, data: data });\n      } else {\n        // console.log(res);\n      }\n    } catch (error) {\n      // console.log(error);\n    }\n  });\n}\n\nfunction* searchBranchesSaga() {\n  yield takeLatest(actions.SEARCH_BRANCHES_REQUEST, function*(params) {\n    try {\n      const res = yield searchBranchesService(params.params);\n      if (res.status === 200) {\n        yield put({ type: actions.SEARCH_BRANCHES_RESPONSE, data: res.data });\n      } else {\n        // console.log(res);\n      }\n    } catch (error) {\n      // console.log(error);\n    }\n  });\n}\n\nexport default function* rootSaga() {\n  yield all([fork(getProvinceSaga), fork(getDistrictSaga), fork(searchBranchesSaga)]);\n}\n"]},"metadata":{},"sourceType":"module"}