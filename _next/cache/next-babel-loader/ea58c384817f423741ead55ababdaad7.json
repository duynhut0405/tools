{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport actions from './actions';\nimport { takeLatest, put, all, fork } from 'redux-saga/effects';\nimport { getMenuItemByPosition } from '../../services/menu';\n\nconst nest = (items, id = null, link = 'parentId') => {\n  return items.filter(item => item[link] === id).map(item => _objectSpread({}, item, {\n    title: `${item.name}`,\n    children: nest(items.sort((a, b) => a.position - b.position), item.id),\n    expanded: true\n  }));\n};\n\nfunction* getMenuHeaderSaga() {\n  yield takeLatest(actions.GET_MENU_HEADER_REQUEST, function* () {\n    try {\n      const res = yield getMenuItemByPosition('top_top');\n\n      if (res.status === 200) {\n        yield put({\n          type: actions.GET_MENU_HEADER_RESPONSE,\n          data: nest(res.data.menuItems)\n        });\n      } else {// console.log(res);\n      }\n    } catch (error) {// console.log(error);\n    }\n  });\n}\n\nfunction* getMenuNavSaga() {\n  yield takeLatest(actions.GET_MENU_NAV_REQUEST, function* () {\n    try {\n      const res = yield getMenuItemByPosition('top2');\n\n      if (res.status === 200) {\n        yield put({\n          type: actions.GET_MENU_NAV_RESPONSE,\n          data: nest(res.data.menuItems)\n        });\n      } else {// console.log(res);\n      }\n    } catch (error) {// console.log(error);\n    }\n  });\n}\n\nfunction* getMenuFooterTopSaga() {\n  yield takeLatest(actions.GET_MENU_FOOTER_TOP_REQUEST, function* () {\n    try {\n      const res = yield getMenuItemByPosition('Menu footer top');\n\n      if (res.status === 200) {\n        yield put({\n          type: actions.GET_MENU_FOOTER_TOP_RESPONSE,\n          data: nest(res.data.menuItems)\n        });\n      } else {// console.log(res);\n      }\n    } catch (error) {// console.log(error);\n    }\n  });\n}\n\nfunction* getMenuFooterMainSaga() {\n  yield takeLatest(actions.GET_MENU_FOOTER_MAIN_REQUEST, function* () {\n    try {\n      const res = yield getMenuItemByPosition('Menu footer main');\n\n      if (res.status === 200) {\n        yield put({\n          type: actions.GET_MENU_FOOTER_MAIN_RESPONSE,\n          data: nest(res.data.menuItems)\n        });\n      } else {// console.log(res);\n      }\n    } catch (error) {// console.log(error);\n    }\n  });\n}\n\nfunction* getMenuFooterBottomSaga() {\n  yield takeLatest(actions.GET_MENU_FOOTER_BOTTOM_REQUEST, function* () {\n    try {\n      const res = yield getMenuItemByPosition('menu footer bottom');\n\n      if (res.status === 200) {\n        yield put({\n          type: actions.GET_MENU_FOOTER_BOTTOM_RESPONSE,\n          data: nest(res.data.menuItems)\n        });\n      } else {// console.log(res);\n      }\n    } catch (error) {// console.log(error);\n    }\n  });\n}\n\nexport default function* rootSaga() {\n  yield all([fork(getMenuHeaderSaga), fork(getMenuNavSaga), fork(getMenuFooterTopSaga), fork(getMenuFooterMainSaga), fork(getMenuFooterBottomSaga)]);\n}","map":null,"metadata":{},"sourceType":"module"}