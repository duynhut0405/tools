{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport Actions from './actions';\nconst intialState = {\n  listNewInvestor: [],\n  listNewNotification: []\n};\n\nconst investorsReducer = (state = intialState, action) => {\n  switch (action.type) {\n    case Actions.GET_NEW_INVESTOR_RESPONSE:\n      return _objectSpread({}, state, {\n        listNewInvestor: action.data\n      });\n\n    case Actions.GET_NEW_INVESTOR_NOTIFICATION_RESPONSE:\n      return _objectSpread({}, state, {\n        listNewNotification: action.data\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default investorsReducer;","map":{"version":3,"sources":["F:/MGROUP/MBnextjs/mb-frontend/store/investors/reducer.js"],"names":["Actions","intialState","listNewInvestor","listNewNotification","investorsReducer","state","action","type","GET_NEW_INVESTOR_RESPONSE","data","GET_NEW_INVESTOR_NOTIFICATION_RESPONSE"],"mappings":";;;;;;AAAA,OAAOA,OAAP,MAAoB,WAApB;AAEA,MAAMC,WAAW,GAAG;AAClBC,EAAAA,eAAe,EAAE,EADC;AAElBC,EAAAA,mBAAmB,EAAE;AAFH,CAApB;;AAKA,MAAMC,gBAAgB,GAAG,CAACC,KAAK,GAAGJ,WAAT,EAAsBK,MAAtB,KAAiC;AACxD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKP,OAAO,CAACQ,yBAAb;AACE,+BACKH,KADL;AAEEH,QAAAA,eAAe,EAAEI,MAAM,CAACG;AAF1B;;AAIF,SAAKT,OAAO,CAACU,sCAAb;AACE,+BACKL,KADL;AAEEF,QAAAA,mBAAmB,EAAEG,MAAM,CAACG;AAF9B;;AAIF;AACE,aAAOJ,KAAP;AAZJ;AAcD,CAfD;;AAiBA,eAAeD,gBAAf","sourcesContent":["import Actions from './actions';\r\n\r\nconst intialState = {\r\n  listNewInvestor: [],\r\n  listNewNotification: []\r\n};\r\n\r\nconst investorsReducer = (state = intialState, action) => {\r\n  switch (action.type) {\r\n    case Actions.GET_NEW_INVESTOR_RESPONSE:\r\n      return {\r\n        ...state,\r\n        listNewInvestor: action.data\r\n      };\r\n    case Actions.GET_NEW_INVESTOR_NOTIFICATION_RESPONSE:\r\n      return {\r\n        ...state,\r\n        listNewNotification: action.data\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default investorsReducer;\r\n"]},"metadata":{},"sourceType":"module"}