{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(getNewByCategorySaga),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(rootSaga);\n\nimport actions from './actions';\nimport { findAllByCategory } from '../../services/news';\nimport { takeLatest, put, all, fork } from 'redux-saga/effects';\n\nfunction getNewByCategorySaga() {\n  return _regeneratorRuntime.wrap(function getNewByCategorySaga$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest(actions.FILL_NEWS_BY_CATEGORY_REQUEST,\n          /*#__PURE__*/\n          _regeneratorRuntime.mark(function _callee(params) {\n            var id, page, year, res;\n            return _regeneratorRuntime.wrap(function _callee$(_context) {\n              while (1) {\n                switch (_context.prev = _context.next) {\n                  case 0:\n                    id = params.id, page = params.page, year = params.year;\n                    _context.prev = 1;\n                    _context.next = 4;\n                    return findAllByCategory(id, page, year);\n\n                  case 4:\n                    res = _context.sent;\n\n                    if (!(res.status === 200)) {\n                      _context.next = 10;\n                      break;\n                    }\n\n                    _context.next = 8;\n                    return put({\n                      type: actions.FILL_NEWS_BY_CATEGORY_RESPONSE,\n                      data: res.data\n                    });\n\n                  case 8:\n                    _context.next = 10;\n                    break;\n\n                  case 10:\n                    _context.next = 14;\n                    break;\n\n                  case 12:\n                    _context.prev = 12;\n                    _context.t0 = _context[\"catch\"](1);\n\n                  case 14:\n                  case \"end\":\n                    return _context.stop();\n                }\n              }\n            }, _callee, null, [[1, 12]]);\n          }));\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked);\n}\n\nexport default function rootSaga() {\n  return _regeneratorRuntime.wrap(function rootSaga$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return all([fork(getNewByCategorySaga)]);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked2);\n}","map":{"version":3,"sources":["F:/MGROUP/MBnextjs/mb-frontend/store/news/saga.js"],"names":["getNewByCategorySaga","rootSaga","actions","findAllByCategory","takeLatest","put","all","fork","FILL_NEWS_BY_CATEGORY_REQUEST","params","id","page","year","res","status","type","FILL_NEWS_BY_CATEGORY_RESPONSE","data"],"mappings":";;;;yBAIUA,oB;;;yBAmBeC,Q;;AAvBzB,OAAOC,OAAP,MAAoB,WAApB;AACA,SAASC,iBAAT,QAAkC,qBAAlC;AACA,SAASC,UAAT,EAAqBC,GAArB,EAA0BC,GAA1B,EAA+BC,IAA/B,QAA2C,oBAA3C;;AAEA,SAAUP,oBAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACE,iBAAMI,UAAU,CAACF,OAAO,CAACM,6BAAT;AAAA;AAAA,mCAAwC,iBAAUC,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAC9CC,oBAAAA,EAD8C,GAC3BD,MAD2B,CAC9CC,EAD8C,EAC1CC,IAD0C,GAC3BF,MAD2B,CAC1CE,IAD0C,EACpCC,IADoC,GAC3BH,MAD2B,CACpCG,IADoC;AAAA;AAAA;AAGxC,2BAAMT,iBAAiB,CAACO,EAAD,EAAKC,IAAL,EAAWC,IAAX,CAAvB;;AAHwC;AAG9CC,oBAAAA,GAH8C;;AAAA,0BAIhDA,GAAG,CAACC,MAAJ,KAAe,GAJiC;AAAA;AAAA;AAAA;;AAAA;AAKlD,2BAAMT,GAAG,CAAC;AACRU,sBAAAA,IAAI,EAAEb,OAAO,CAACc,8BADN;AAERC,sBAAAA,IAAI,EAAEJ,GAAG,CAACI;AAFF,qBAAD,CAAT;;AALkD;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAxC,EAAhB;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAmBA,eAAe,SAAUhB,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACb,iBAAMK,GAAG,CAAC,CAACC,IAAI,CAACP,oBAAD,CAAL,CAAD,CAAT;;AADa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import actions from './actions';\r\nimport { findAllByCategory } from '../../services/news';\r\nimport { takeLatest, put, all, fork } from 'redux-saga/effects';\r\n\r\nfunction* getNewByCategorySaga() {\r\n  yield takeLatest(actions.FILL_NEWS_BY_CATEGORY_REQUEST, function*(params) {\r\n    const { id, page, year } = params;\r\n    try {\r\n      const res = yield findAllByCategory(id, page, year);\r\n      if (res.status === 200) {\r\n        yield put({\r\n          type: actions.FILL_NEWS_BY_CATEGORY_RESPONSE,\r\n          data: res.data\r\n        });\r\n      } else {\r\n        // console.log(res);\r\n      }\r\n    } catch (error) {\r\n      // console.log(error);\r\n    }\r\n  });\r\n}\r\n\r\nexport default function* rootSaga() {\r\n  yield all([fork(getNewByCategorySaga)]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}