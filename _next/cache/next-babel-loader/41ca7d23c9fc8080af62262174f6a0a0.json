{"ast":null,"code":"import actions from './actions';\nimport { takeLatest, put, all, fork } from 'redux-saga/effects';\nimport { getPageService, getPagesByIdService } from '../../services/page';\nimport { filter } from 'lodash';\n\nfunction* pageSaga() {\n  yield takeLatest(actions.GET_HOME_REQUEST, function* (params) {\n    const {\n      name\n    } = params;\n\n    try {\n      const res = yield getPageService(name);\n\n      if (res.status === 200) {\n        let silder = [];\n        const silderData = yield filter(res.data.pageBlocks, item => item.name === 'Silder');\n\n        for (let i = 0; i < silderData.length; i++) {\n          silder = [...silder, ...JSON.parse(silderData[i].content)];\n        }\n\n        yield put({\n          type: actions.GET_HOME_RESPONSE,\n          data: res.data,\n          silder,\n          router: name\n        });\n      } else {// console.log(res);\n      }\n    } catch (error) {// console.log(error);\n    }\n  });\n}\n\nfunction* pagesBySaga() {\n  yield takeLatest(actions.GET_PAGES_BY_ID_REQUEST, function* (params) {\n    const {\n      data\n    } = params;\n\n    try {\n      const res = yield getPagesByIdService(data);\n\n      if (res.status === 200) {\n        yield put({\n          type: actions.GET_PAGES_BY_ID_RESPONSE,\n          data: res.data\n        });\n      } else {// console.log(res);\n      }\n    } catch (error) {// console.log(error);\n    }\n  });\n}\n\nexport default function* rootSaga() {\n  yield all([fork(pageSaga), fork(pagesBySaga)]);\n}","map":{"version":3,"sources":["/home/user/mb-frontend/store/page/saga.js"],"names":["actions","takeLatest","put","all","fork","getPageService","getPagesByIdService","filter","pageSaga","GET_HOME_REQUEST","params","name","res","status","silder","silderData","data","pageBlocks","item","i","length","JSON","parse","content","type","GET_HOME_RESPONSE","router","error","pagesBySaga","GET_PAGES_BY_ID_REQUEST","GET_PAGES_BY_ID_RESPONSE","rootSaga"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,WAApB;AACA,SAASC,UAAT,EAAqBC,GAArB,EAA0BC,GAA1B,EAA+BC,IAA/B,QAA2C,oBAA3C;AACA,SAASC,cAAT,EAAyBC,mBAAzB,QAAoD,qBAApD;AACA,SAASC,MAAT,QAAuB,QAAvB;;AAEA,UAAUC,QAAV,GAAqB;AACnB,QAAMP,UAAU,CAACD,OAAO,CAACS,gBAAT,EAA2B,WAAUC,MAAV,EAAkB;AAC3D,UAAM;AAAEC,MAAAA;AAAF,QAAWD,MAAjB;;AACA,QAAI;AACF,YAAME,GAAG,GAAG,MAAMP,cAAc,CAACM,IAAD,CAAhC;;AACA,UAAIC,GAAG,CAACC,MAAJ,KAAe,GAAnB,EAAwB;AACtB,YAAIC,MAAM,GAAG,EAAb;AACA,cAAMC,UAAU,GAAG,MAAMR,MAAM,CAACK,GAAG,CAACI,IAAJ,CAASC,UAAV,EAAsBC,IAAI,IAAIA,IAAI,CAACP,IAAL,KAAc,QAA5C,CAA/B;;AACA,aAAK,IAAIQ,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,UAAU,CAACK,MAA/B,EAAuCD,CAAC,EAAxC,EAA4C;AAC1CL,UAAAA,MAAM,GAAG,CAAC,GAAGA,MAAJ,EAAY,GAAGO,IAAI,CAACC,KAAL,CAAWP,UAAU,CAACI,CAAD,CAAV,CAAcI,OAAzB,CAAf,CAAT;AACD;;AACD,cAAMrB,GAAG,CAAC;AACRsB,UAAAA,IAAI,EAAExB,OAAO,CAACyB,iBADN;AAERT,UAAAA,IAAI,EAAEJ,GAAG,CAACI,IAFF;AAGRF,UAAAA,MAHQ;AAIRY,UAAAA,MAAM,EAAEf;AAJA,SAAD,CAAT;AAMD,OAZD,MAYO,CACL;AACD;AACF,KAjBD,CAiBE,OAAOgB,KAAP,EAAc,CACd;AACD;AACF,GAtBe,CAAhB;AAuBD;;AACD,UAAUC,WAAV,GAAwB;AACtB,QAAM3B,UAAU,CAACD,OAAO,CAAC6B,uBAAT,EAAkC,WAAUnB,MAAV,EAAkB;AAClE,UAAM;AAAEM,MAAAA;AAAF,QAAWN,MAAjB;;AACA,QAAI;AACF,YAAME,GAAG,GAAG,MAAMN,mBAAmB,CAACU,IAAD,CAArC;;AACA,UAAIJ,GAAG,CAACC,MAAJ,KAAe,GAAnB,EAAwB;AACtB,cAAMX,GAAG,CAAC;AAAEsB,UAAAA,IAAI,EAAExB,OAAO,CAAC8B,wBAAhB;AAA0Cd,UAAAA,IAAI,EAAEJ,GAAG,CAACI;AAApD,SAAD,CAAT;AACD,OAFD,MAEO,CACL;AACD;AACF,KAPD,CAOE,OAAOW,KAAP,EAAc,CACd;AACD;AACF,GAZe,CAAhB;AAaD;;AAED,eAAe,UAAUI,QAAV,GAAqB;AAClC,QAAM5B,GAAG,CAAC,CAACC,IAAI,CAACI,QAAD,CAAL,EAAiBJ,IAAI,CAACwB,WAAD,CAArB,CAAD,CAAT;AACD","sourcesContent":["import actions from './actions';\nimport { takeLatest, put, all, fork } from 'redux-saga/effects';\nimport { getPageService, getPagesByIdService } from '../../services/page';\nimport { filter } from 'lodash';\n\nfunction* pageSaga() {\n  yield takeLatest(actions.GET_HOME_REQUEST, function*(params) {\n    const { name } = params;\n    try {\n      const res = yield getPageService(name);\n      if (res.status === 200) {\n        let silder = [];\n        const silderData = yield filter(res.data.pageBlocks, item => item.name === 'Silder');\n        for (let i = 0; i < silderData.length; i++) {\n          silder = [...silder, ...JSON.parse(silderData[i].content)];\n        }\n        yield put({\n          type: actions.GET_HOME_RESPONSE,\n          data: res.data,\n          silder,\n          router: name\n        });\n      } else {\n        // console.log(res);\n      }\n    } catch (error) {\n      // console.log(error);\n    }\n  });\n}\nfunction* pagesBySaga() {\n  yield takeLatest(actions.GET_PAGES_BY_ID_REQUEST, function*(params) {\n    const { data } = params;\n    try {\n      const res = yield getPagesByIdService(data);\n      if (res.status === 200) {\n        yield put({ type: actions.GET_PAGES_BY_ID_RESPONSE, data: res.data });\n      } else {\n        // console.log(res);\n      }\n    } catch (error) {\n      // console.log(error);\n    }\n  });\n}\n\nexport default function* rootSaga() {\n  yield all([fork(pageSaga), fork(pagesBySaga)]);\n}\n"]},"metadata":{},"sourceType":"module"}