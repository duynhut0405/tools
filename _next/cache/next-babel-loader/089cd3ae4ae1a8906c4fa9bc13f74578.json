{"ast":null,"code":"var _jsxFileName = \"F:\\\\MGROUP\\\\MBnextjs\\\\mb-frontend\\\\components\\\\block\\\\Form.js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState, useEffect } from 'react';\nimport Proptypes from 'prop-types';\nimport { getFormbuilderByIdService } from '../../services/form';\nimport { map } from 'lodash';\nimport ReactHtmlParser from 'react-html-parser';\nimport { Button, FormGroup, Input } from 'reactstrap';\nconst propTypes = {\n  data: Proptypes.object.isRequired,\n  getPageBlock: Proptypes.func\n};\n\nfunction Form({\n  data\n}) {\n  const {\n    0: formdata,\n    1: setFormData\n  } = useState([]);\n  const {\n    0: formState,\n    1: setFormState\n  } = useState({});\n\n  const getFormByID = async () => {\n    const res = await getFormbuilderByIdService(data.formdata);\n\n    if (res && res.status === 200) {\n      setFormData(JSON.parse(res.data.list));\n    }\n  };\n\n  useEffect(() => {\n    getFormByID();\n  }, []);\n\n  const handleChange = event => {\n    event.persist();\n    setFormState(formState => _objectSpread({}, formState, {\n      [event.target.name]: event.target.value\n    }));\n  };\n\n  console.log(formState);\n  return __jsx(\"section\", {\n    className: \"sec-tb\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }, __jsx(\"div\", {\n    className: \"container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }, __jsx(\"div\", {\n    className: \"max750\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }, map(formdata, (item, index) => {\n    if (item.type === 'header') {\n      return __jsx(React.Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43\n        },\n        __self: this\n      }, __jsx(\"div\", {\n        className: \"max600 entry-head text-center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        },\n        __self: this\n      }, ReactHtmlParser(item.label)));\n    }\n\n    if (item.type === 'paragraph') {\n      return __jsx(\"p\", {\n        className: item.className,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        },\n        __self: this\n      }, ReactHtmlParser(item.label));\n    }\n\n    if (item.type === 'radio-group') {\n      return __jsx(\"div\", {\n        className: \"mb-30 text-center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53\n        },\n        __self: this\n      }, map(item.values, (items, key) => __jsx(\"label\", {\n        className: \"radio\",\n        key: key,\n        style: {\n          marginLeft: '20px'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55\n        },\n        __self: this\n      }, __jsx(\"input\", {\n        type: \"radio\",\n        name: \"check1\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56\n        },\n        __self: this\n      }), __jsx(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57\n        },\n        __self: this\n      }), items.label)));\n    }\n\n    if (item.type === 'text') {\n      return __jsx(React.Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }, __jsx(\"div\", {\n        className: \"col-12\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      }, __jsx(\"label\", {\n        className: \"block\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      }, __jsx(\"span\", {\n        className: \"title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }, item.label), __jsx(Input, {\n        className: \"input\",\n        name: item.name,\n        type: \"text\",\n        placeholder: item.placeholder,\n        style: {\n          width: '100%'\n        },\n        onChange: e => handleChange(e),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      }))));\n    }\n\n    if (item.type === 'textarea') {\n      return __jsx(React.Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85\n        },\n        __self: this\n      }, __jsx(\"div\", {\n        className: \"col-12\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86\n        },\n        __self: this\n      }, __jsx(\"label\", {\n        className: \"block\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87\n        },\n        __self: this\n      }, __jsx(\"span\", {\n        className: \"title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      }, item.label, \"(\", __jsx(\"span\", {\n        className: \"require\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      }, \"*\"), \")\"), __jsx(\"textarea\", {\n        className: \"input\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }))));\n    }\n\n    if (item.type === 'button') {\n      return __jsx(React.Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }, __jsx(\"div\", {\n        className: \"col-12 text-center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        },\n        __self: this\n      }, __jsx(\"button\", {\n        className: \"btn\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      }, item.label)));\n    }\n  }))));\n}\n\nForm.propTypes = propTypes;\nexport default Form;","map":{"version":3,"sources":["F:/MGROUP/MBnextjs/mb-frontend/components/block/Form.js"],"names":["React","useState","useEffect","Proptypes","getFormbuilderByIdService","map","ReactHtmlParser","Button","FormGroup","Input","propTypes","data","object","isRequired","getPageBlock","func","Form","formdata","setFormData","formState","setFormState","getFormByID","res","status","JSON","parse","list","handleChange","event","persist","target","name","value","console","log","item","index","type","label","className","values","items","key","marginLeft","placeholder","width","e"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport Proptypes from 'prop-types';\r\nimport { getFormbuilderByIdService } from '../../services/form';\r\nimport { map } from 'lodash';\r\nimport ReactHtmlParser from 'react-html-parser';\r\nimport { Button, FormGroup, Input } from 'reactstrap';\r\n\r\nconst propTypes = {\r\n  data: Proptypes.object.isRequired,\r\n  getPageBlock: Proptypes.func\r\n};\r\n\r\nfunction Form({ data }) {\r\n  const [formdata, setFormData] = useState([]);\r\n  const [formState, setFormState] = useState({});\r\n  const getFormByID = async () => {\r\n    const res = await getFormbuilderByIdService(data.formdata);\r\n    if (res && res.status === 200) {\r\n      setFormData(JSON.parse(res.data.list));\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    getFormByID();\r\n  }, []);\r\n\r\n  const handleChange = event => {\r\n    event.persist();\r\n    setFormState(formState => ({\r\n      ...formState,\r\n      [event.target.name]: event.target.value\r\n    }));\r\n  };\r\n\r\n  console.log(formState);\r\n  return (\r\n    <section className=\"sec-tb\">\r\n      <div className=\"container\">\r\n        <div className=\"max750\">\r\n          {map(formdata, (item, index) => {\r\n            if (item.type === 'header') {\r\n              return (\r\n                <React.Fragment>\r\n                  <div className=\"max600 entry-head text-center\">{ReactHtmlParser(item.label)}</div>\r\n                </React.Fragment>\r\n              );\r\n            }\r\n            if (item.type === 'paragraph') {\r\n              return <p className={item.className}>{ReactHtmlParser(item.label)}</p>;\r\n            }\r\n            if (item.type === 'radio-group') {\r\n              return (\r\n                <div className=\"mb-30 text-center\">\r\n                  {map(item.values, (items, key) => (\r\n                    <label className=\"radio\" key={key} style={{ marginLeft: '20px' }}>\r\n                      <input type=\"radio\" name=\"check1\" />\r\n                      <span></span>\r\n                      {items.label}\r\n                    </label>\r\n                  ))}\r\n                </div>\r\n              );\r\n            }\r\n            if (item.type === 'text') {\r\n              return (\r\n                <React.Fragment>\r\n                  <div className=\"col-12\">\r\n                    <label className=\"block\">\r\n                      <span className=\"title\">{item.label}</span>\r\n                      <Input\r\n                        className=\"input\"\r\n                        name={item.name}\r\n                        type=\"text\"\r\n                        placeholder={item.placeholder}\r\n                        style={{ width: '100%' }}\r\n                        onChange={e => handleChange(e)}\r\n                      />\r\n                    </label>\r\n                  </div>\r\n                </React.Fragment>\r\n              );\r\n            }\r\n            if (item.type === 'textarea') {\r\n              return (\r\n                <React.Fragment>\r\n                  <div className=\"col-12\">\r\n                    <label className=\"block\">\r\n                      <span className=\"title\">\r\n                        {item.label}(<span className=\"require\">*</span>)\r\n                      </span>\r\n                      <textarea className=\"input\"></textarea>\r\n                    </label>\r\n                  </div>\r\n                </React.Fragment>\r\n              );\r\n            }\r\n            if (item.type === 'button') {\r\n              return (\r\n                <React.Fragment>\r\n                  <div className=\"col-12 text-center\">\r\n                    <button className=\"btn\">{item.label}</button>\r\n                  </div>\r\n                </React.Fragment>\r\n              );\r\n            }\r\n          })}\r\n        </div>\r\n      </div>\r\n    </section>\r\n  );\r\n}\r\n\r\nForm.propTypes = propTypes;\r\n\r\nexport default Form;\r\n"]},"metadata":{},"sourceType":"module"}