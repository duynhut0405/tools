{"ast":null,"code":"import actions from './actions';\nimport { map } from 'lodash';\nimport { takeLatest, put, all, fork } from 'redux-saga/effects';\nimport { getProvinceService, getDistrictService, searchBranchesService } from '../../services/map';\n\nfunction* getProvinceSaga() {\n  yield takeLatest(actions.GET_PROVINCE_REQUEST, function* () {\n    try {\n      const res = yield getProvinceService();\n\n      if (res.status === 200) {\n        const data = map(res.data, province => ({\n          value: province.id,\n          label: province.name\n        }));\n        yield put({\n          type: actions.GET_PROVINCE_RESPONSE,\n          data: data\n        });\n      } else {// console.log(res);\n      }\n    } catch (error) {// console.log(error);\n    }\n  });\n}\n\nfunction* getDistrictSaga() {\n  yield takeLatest(actions.GET_DISTRICT_REQUEST, function* (params) {\n    const {\n      id\n    } = params;\n\n    try {\n      const res = yield getDistrictService(id);\n\n      if (res.status === 200) {\n        const data = map(res.data, district => ({\n          value: district.id,\n          label: district.name\n        }));\n        yield put({\n          type: actions.GET_DISTRICT_RESPONSE,\n          data: data\n        });\n      } else {// console.log(res);\n      }\n    } catch (error) {// console.log(error);\n    }\n  });\n}\n\nfunction* searchBranchesSaga() {\n  yield takeLatest(actions.SEARCH_BRANCHES_REQUEST, function* (params) {\n    try {\n      const res = yield searchBranchesService(params.params);\n\n      if (res.status === 200) {\n        yield put({\n          type: actions.SEARCH_BRANCHES_RESPONSE,\n          data: res.data\n        });\n      } else {// console.log(res);\n      }\n    } catch (error) {// console.log(error);\n    }\n  });\n}\n\nexport default function* rootSaga() {\n  yield all([fork(getProvinceSaga), fork(getDistrictSaga), fork(searchBranchesSaga)]);\n}","map":null,"metadata":{},"sourceType":"module"}