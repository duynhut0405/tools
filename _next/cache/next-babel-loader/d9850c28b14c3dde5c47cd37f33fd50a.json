{"ast":null,"code":"import actions from './actions';\nimport { takeLatest, put, all, fork } from 'redux-saga/effects';\nimport { fillRegulationServices, getTypeRegulationServices, getUrlVideoService, getRegulationPagation, getRegulationListYear, getTypeRegulationByIDServices } from '../../services/regulation';\n\nfunction* getRegulationSaga() {\n  yield takeLatest(actions.GET_REGULATION_PAGINATION_REQUEST, function* (params) {\n    const {\n      types,\n      year,\n      page\n    } = params;\n\n    try {\n      const res = yield getRegulationPagation(types, year, page);\n\n      if (res.status === 200) {\n        yield put({\n          type: actions.GET_REGULATION_PAGINATION_RESPONSE,\n          data: res.data\n        });\n      } else {// console.log(res);\n      }\n    } catch (error) {// console.log(error);\n    }\n  });\n}\n\nfunction* searchRegulationSaga() {\n  yield takeLatest(actions.SEARCH_REGULATION_REQUEST, function* (params) {\n    const {\n      data\n    } = params;\n\n    try {\n      const res = yield fillRegulationServices(data);\n\n      if (res.status === 200) {\n        yield put({\n          type: actions.SEARCH_REGULATION_RESPONSE,\n          data: res.data\n        });\n      } else {// console.log(res);\n      }\n    } catch (error) {// console.log(error);\n    }\n  });\n}\n\nfunction* getTypeRegulationSaga() {\n  yield takeLatest(actions.GET_TYPE_REGULATION_REQUEST, function* () {\n    try {\n      const res = yield getTypeRegulationServices();\n\n      if (res.status === 200) {\n        yield put({\n          type: actions.GET_TYPE_REGULATION_RESPONSE,\n          data: res.data\n        });\n      } else {// console.log(res);\n      }\n    } catch (error) {// console.log(error);\n    }\n  });\n}\n\nfunction* getTypeRegulationByIDSaga() {\n  yield takeLatest(actions.GET_TYPE_REGULATION_BY_ID_REQUEST, function* (params) {\n    const {\n      id\n    } = params;\n\n    try {\n      const res = yield getTypeRegulationByIDServices(id);\n\n      if (res.status === 200) {\n        yield put({\n          type: actions.GET_TYPE_REGULATION_BY_ID_RESPONSE,\n          data: res.data\n        });\n      } else {// console.log(res);\n      }\n    } catch (error) {// console.log(error);\n    }\n  });\n}\n\nfunction* getUrlVideoSaga() {\n  yield takeLatest(actions.GET_URL_VIDEO_REQUEST, function* (params) {\n    const {\n      data\n    } = params;\n\n    try {\n      const res = yield getUrlVideoService(data);\n\n      if (res.status === 200) {\n        yield put({\n          type: actions.GET_URL_VIDEO_RESPONSE,\n          data: res.data\n        });\n      } else {// console.log(res);\n      }\n    } catch (error) {// console.log(error);\n    }\n  });\n}\n\nfunction* getRegulationByYearSaga() {\n  yield takeLatest(actions.GET_REGULATION_BY_YEAR_REQUEST, function* (params) {\n    const {\n      types,\n      detailTypeId,\n      number,\n      page,\n      year\n    } = params;\n\n    try {\n      const res = yield getRegulationListYear(types, detailTypeId, number, page, year);\n\n      if (res.status === 200) {\n        yield put({\n          type: actions.GET_REGULATION_BY_YEAR_RESPONSE,\n          data: res.data\n        });\n      } else {// console.log(res);\n      }\n    } catch (error) {// console.log(error);\n    }\n  });\n}\n\nexport default function* rootSaga() {\n  yield all([fork(searchRegulationSaga), fork(getTypeRegulationSaga), fork(getUrlVideoSaga), fork(getRegulationSaga), fork(getRegulationByYearSaga), fork(getTypeRegulationByIDSaga)]);\n}","map":{"version":3,"sources":["F:/MGROUP/MBnextjs/mb-frontend/store/regulation/saga.js"],"names":["actions","takeLatest","put","all","fork","fillRegulationServices","getTypeRegulationServices","getUrlVideoService","getRegulationPagation","getRegulationListYear","getTypeRegulationByIDServices","getRegulationSaga","GET_REGULATION_PAGINATION_REQUEST","params","types","year","page","res","status","type","GET_REGULATION_PAGINATION_RESPONSE","data","error","searchRegulationSaga","SEARCH_REGULATION_REQUEST","SEARCH_REGULATION_RESPONSE","getTypeRegulationSaga","GET_TYPE_REGULATION_REQUEST","GET_TYPE_REGULATION_RESPONSE","getTypeRegulationByIDSaga","GET_TYPE_REGULATION_BY_ID_REQUEST","id","GET_TYPE_REGULATION_BY_ID_RESPONSE","getUrlVideoSaga","GET_URL_VIDEO_REQUEST","GET_URL_VIDEO_RESPONSE","getRegulationByYearSaga","GET_REGULATION_BY_YEAR_REQUEST","detailTypeId","number","GET_REGULATION_BY_YEAR_RESPONSE","rootSaga"],"mappings":"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","sourcesContent":["import actions from './actions';\r\nimport { takeLatest, put, all, fork } from 'redux-saga/effects';\r\nimport {\r\n  fillRegulationServices,\r\n  getTypeRegulationServices,\r\n  getUrlVideoService,\r\n  getRegulationPagation,\r\n  getRegulationListYear,\r\n  getTypeRegulationByIDServices\r\n} from '../../services/regulation';\r\n\r\nfunction* getRegulationSaga() {\r\n  yield takeLatest(actions.GET_REGULATION_PAGINATION_REQUEST, function*(params) {\r\n    const { types, year, page } = params;\r\n    try {\r\n      const res = yield getRegulationPagation(types, year, page);\r\n      if (res.status === 200) {\r\n        yield put({ type: actions.GET_REGULATION_PAGINATION_RESPONSE, data: res.data });\r\n      } else {\r\n        // console.log(res);\r\n      }\r\n    } catch (error) {\r\n      // console.log(error);\r\n    }\r\n  });\r\n}\r\n\r\nfunction* searchRegulationSaga() {\r\n  yield takeLatest(actions.SEARCH_REGULATION_REQUEST, function*(params) {\r\n    const { data } = params;\r\n    try {\r\n      const res = yield fillRegulationServices(data);\r\n      if (res.status === 200) {\r\n        yield put({ type: actions.SEARCH_REGULATION_RESPONSE, data: res.data });\r\n      } else {\r\n        // console.log(res);\r\n      }\r\n    } catch (error) {\r\n      // console.log(error);\r\n    }\r\n  });\r\n}\r\n\r\nfunction* getTypeRegulationSaga() {\r\n  yield takeLatest(actions.GET_TYPE_REGULATION_REQUEST, function*() {\r\n    try {\r\n      const res = yield getTypeRegulationServices();\r\n      if (res.status === 200) {\r\n        yield put({ type: actions.GET_TYPE_REGULATION_RESPONSE, data: res.data });\r\n      } else {\r\n        // console.log(res);\r\n      }\r\n    } catch (error) {\r\n      // console.log(error);\r\n    }\r\n  });\r\n}\r\n\r\nfunction* getTypeRegulationByIDSaga() {\r\n  yield takeLatest(actions.GET_TYPE_REGULATION_BY_ID_REQUEST, function*(params) {\r\n    const { id } = params;\r\n    try {\r\n      const res = yield getTypeRegulationByIDServices(id);\r\n      if (res.status === 200) {\r\n        yield put({ type: actions.GET_TYPE_REGULATION_BY_ID_RESPONSE, data: res.data });\r\n      } else {\r\n        // console.log(res);\r\n      }\r\n    } catch (error) {\r\n      // console.log(error);\r\n    }\r\n  });\r\n}\r\n\r\nfunction* getUrlVideoSaga() {\r\n  yield takeLatest(actions.GET_URL_VIDEO_REQUEST, function*(params) {\r\n    const { data } = params;\r\n    try {\r\n      const res = yield getUrlVideoService(data);\r\n      if (res.status === 200) {\r\n        yield put({ type: actions.GET_URL_VIDEO_RESPONSE, data: res.data });\r\n      } else {\r\n        // console.log(res);\r\n      }\r\n    } catch (error) {\r\n      // console.log(error);\r\n    }\r\n  });\r\n}\r\n\r\nfunction* getRegulationByYearSaga() {\r\n  yield takeLatest(actions.GET_REGULATION_BY_YEAR_REQUEST, function*(params) {\r\n    const { types, detailTypeId, number, page, year } = params;\r\n    try {\r\n      const res = yield getRegulationListYear(types, detailTypeId, number, page, year);\r\n      if (res.status === 200) {\r\n        yield put({ type: actions.GET_REGULATION_BY_YEAR_RESPONSE, data: res.data });\r\n      } else {\r\n        // console.log(res);\r\n      }\r\n    } catch (error) {\r\n      // console.log(error);\r\n    }\r\n  });\r\n}\r\n\r\nexport default function* rootSaga() {\r\n  yield all([\r\n    fork(searchRegulationSaga),\r\n    fork(getTypeRegulationSaga),\r\n    fork(getUrlVideoSaga),\r\n    fork(getRegulationSaga),\r\n    fork(getRegulationByYearSaga),\r\n    fork(getTypeRegulationByIDSaga)\r\n  ]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}