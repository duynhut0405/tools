{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport actions from './actions';\nimport { takeLatest, put, all, fork } from 'redux-saga/effects';\nimport { getRateService } from '../../services/rate';\n\nfunction* getRateSaga() {\n  yield takeLatest(actions.GET_RATE_REQUEST, function* () {\n    try {\n      const res = yield getRateService();\n\n      if (res.status === 200) {\n        let list = {};\n        const sortData = yield res.data.sort((date_1, date_2) => date_2.created_at - date_1.created_at);\n\n        for (let i = 0; i < 1; i++) {\n          list = _objectSpread({}, list, {}, sortData[i]);\n        }\n\n        yield put({\n          type: actions.GET_RATE_RESPONSE,\n          data: list\n        });\n      } else {// console.log(res);\n      }\n    } catch (error) {// console.log(error);\n    }\n  });\n}\n\nexport default function* rootSaga() {\n  yield all([fork(getRateSaga)]);\n}","map":null,"metadata":{},"sourceType":"module"}