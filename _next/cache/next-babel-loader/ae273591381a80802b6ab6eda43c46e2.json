{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(getNewSaga),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(getNotifiactionSaga),\n    _marked3 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(rootSaga);\n\nimport actions from './actions';\nimport { takeLatest, put, all, fork } from 'redux-saga/effects';\nimport { getNewCategoryIdService } from '../../services/news';\n\nfunction getNewSaga() {\n  return _regeneratorRuntime.wrap(function getNewSaga$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest(actions.GET_NEW_INVESTOR_REQUEST,\n          /*#__PURE__*/\n          _regeneratorRuntime.mark(function _callee(params) {\n            var id, res;\n            return _regeneratorRuntime.wrap(function _callee$(_context) {\n              while (1) {\n                switch (_context.prev = _context.next) {\n                  case 0:\n                    id = params.id;\n                    _context.prev = 1;\n                    _context.next = 4;\n                    return getNewCategoryIdService(id);\n\n                  case 4:\n                    res = _context.sent;\n\n                    if (!(res.status === 200)) {\n                      _context.next = 10;\n                      break;\n                    }\n\n                    _context.next = 8;\n                    return put({\n                      type: actions.GET_NEW_INVESTOR_RESPONSE,\n                      data: res.data\n                    });\n\n                  case 8:\n                    _context.next = 10;\n                    break;\n\n                  case 10:\n                    _context.next = 14;\n                    break;\n\n                  case 12:\n                    _context.prev = 12;\n                    _context.t0 = _context[\"catch\"](1);\n\n                  case 14:\n                  case \"end\":\n                    return _context.stop();\n                }\n              }\n            }, _callee, null, [[1, 12]]);\n          }));\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked);\n}\n\nfunction getNotifiactionSaga() {\n  return _regeneratorRuntime.wrap(function getNotifiactionSaga$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeLatest(actions.GET_NEW_INVESTOR_NOTIFICATION_REQUEST,\n          /*#__PURE__*/\n          _regeneratorRuntime.mark(function _callee2(params) {\n            var id, res;\n            return _regeneratorRuntime.wrap(function _callee2$(_context3) {\n              while (1) {\n                switch (_context3.prev = _context3.next) {\n                  case 0:\n                    id = params.id;\n                    _context3.prev = 1;\n                    _context3.next = 4;\n                    return getNewCategoryIdService(id);\n\n                  case 4:\n                    res = _context3.sent;\n\n                    if (!(res.status === 200)) {\n                      _context3.next = 10;\n                      break;\n                    }\n\n                    _context3.next = 8;\n                    return put({\n                      type: actions.GET_NEW_INVESTOR_NOTIFICATION_RESPONSE,\n                      data: res.data\n                    });\n\n                  case 8:\n                    _context3.next = 10;\n                    break;\n\n                  case 10:\n                    _context3.next = 14;\n                    break;\n\n                  case 12:\n                    _context3.prev = 12;\n                    _context3.t0 = _context3[\"catch\"](1);\n\n                  case 14:\n                  case \"end\":\n                    return _context3.stop();\n                }\n              }\n            }, _callee2, null, [[1, 12]]);\n          }));\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked2);\n}\n\nexport default function rootSaga() {\n  return _regeneratorRuntime.wrap(function rootSaga$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return all([fork(getNewSaga), fork(getNotifiactionSaga)]);\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked3);\n}","map":{"version":3,"sources":["/home/user/mb-frontend/store/investors/saga.js"],"names":["getNewSaga","getNotifiactionSaga","rootSaga","actions","takeLatest","put","all","fork","getNewCategoryIdService","GET_NEW_INVESTOR_REQUEST","params","id","res","status","type","GET_NEW_INVESTOR_RESPONSE","data","GET_NEW_INVESTOR_NOTIFICATION_REQUEST","GET_NEW_INVESTOR_NOTIFICATION_RESPONSE"],"mappings":";;;;yBAIUA,U;;;yBAeAC,mB;;;yBAgBeC,Q;;AAnCzB,OAAOC,OAAP,MAAoB,WAApB;AACA,SAASC,UAAT,EAAqBC,GAArB,EAA0BC,GAA1B,EAA+BC,IAA/B,QAA2C,oBAA3C;AACA,SAASC,uBAAT,QAAwC,qBAAxC;;AAEA,SAAUR,UAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACE,iBAAMI,UAAU,CAACD,OAAO,CAACM,wBAAT;AAAA;AAAA,mCAAmC,iBAAUC,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACzCC,oBAAAA,EADyC,GAClCD,MADkC,CACzCC,EADyC;AAAA;AAAA;AAGnC,2BAAMH,uBAAuB,CAACG,EAAD,CAA7B;;AAHmC;AAGzCC,oBAAAA,GAHyC;;AAAA,0BAI3CA,GAAG,CAACC,MAAJ,KAAe,GAJ4B;AAAA;AAAA;AAAA;;AAAA;AAK7C,2BAAMR,GAAG,CAAC;AAAES,sBAAAA,IAAI,EAAEX,OAAO,CAACY,yBAAhB;AAA2CC,sBAAAA,IAAI,EAAEJ,GAAG,CAACI;AAArD,qBAAD,CAAT;;AAL6C;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAnC,EAAhB;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAeA,SAAUf,mBAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACE,iBAAMG,UAAU,CAACD,OAAO,CAACc,qCAAT;AAAA;AAAA,mCAAgD,kBAAUP,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACtDC,oBAAAA,EADsD,GAC/CD,MAD+C,CACtDC,EADsD;AAAA;AAAA;AAGhD,2BAAMH,uBAAuB,CAACG,EAAD,CAA7B;;AAHgD;AAGtDC,oBAAAA,GAHsD;;AAAA,0BAIxDA,GAAG,CAACC,MAAJ,KAAe,GAJyC;AAAA;AAAA;AAAA;;AAAA;AAK1D,2BAAMR,GAAG,CAAC;AAAES,sBAAAA,IAAI,EAAEX,OAAO,CAACe,sCAAhB;AAAwDF,sBAAAA,IAAI,EAAEJ,GAAG,CAACI;AAAlE,qBAAD,CAAT;;AAL0D;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAhD,EAAhB;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAgBA,eAAe,SAAUd,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACb,iBAAMI,GAAG,CAAC,CAACC,IAAI,CAACP,UAAD,CAAL,EAAmBO,IAAI,CAACN,mBAAD,CAAvB,CAAD,CAAT;;AADa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import actions from './actions';\nimport { takeLatest, put, all, fork } from 'redux-saga/effects';\nimport { getNewCategoryIdService } from '../../services/news';\n\nfunction* getNewSaga() {\n  yield takeLatest(actions.GET_NEW_INVESTOR_REQUEST, function*(params) {\n    const { id } = params;\n    try {\n      const res = yield getNewCategoryIdService(id);\n      if (res.status === 200) {\n        yield put({ type: actions.GET_NEW_INVESTOR_RESPONSE, data: res.data });\n      } else {\n        // console.log(res);\n      }\n    } catch (error) {\n      // console.log(error);\n    }\n  });\n}\nfunction* getNotifiactionSaga() {\n  yield takeLatest(actions.GET_NEW_INVESTOR_NOTIFICATION_REQUEST, function*(params) {\n    const { id } = params;\n    try {\n      const res = yield getNewCategoryIdService(id);\n      if (res.status === 200) {\n        yield put({ type: actions.GET_NEW_INVESTOR_NOTIFICATION_RESPONSE, data: res.data });\n      } else {\n        // console.log(res);\n      }\n    } catch (error) {\n      // console.log(error);\n    }\n  });\n}\n\nexport default function* rootSaga() {\n  yield all([fork(getNewSaga), fork(getNotifiactionSaga)]);\n}\n"]},"metadata":{},"sourceType":"module"}