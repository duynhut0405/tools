{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(getRateSaga),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(rootSaga);\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport actions from './actions';\nimport { takeLatest, put, all, fork } from 'redux-saga/effects';\nimport { getRateService } from '../../services/rate';\n\nfunction getRateSaga() {\n  return _regeneratorRuntime.wrap(function getRateSaga$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest(actions.GET_RATE_REQUEST,\n          /*#__PURE__*/\n          _regeneratorRuntime.mark(function _callee() {\n            var res, list, sortData, i;\n            return _regeneratorRuntime.wrap(function _callee$(_context) {\n              while (1) {\n                switch (_context.prev = _context.next) {\n                  case 0:\n                    _context.prev = 0;\n                    _context.next = 3;\n                    return getRateService();\n\n                  case 3:\n                    res = _context.sent;\n\n                    if (!(res.status === 200)) {\n                      _context.next = 14;\n                      break;\n                    }\n\n                    list = {};\n                    _context.next = 8;\n                    return res.data.sort(function (date_1, date_2) {\n                      return date_2.created_at - date_1.created_at;\n                    });\n\n                  case 8:\n                    sortData = _context.sent;\n\n                    for (i = 0; i < 1; i++) {\n                      list = _objectSpread({}, list, {}, sortData[i]);\n                    }\n\n                    _context.next = 12;\n                    return put({\n                      type: actions.GET_RATE_RESPONSE,\n                      data: list\n                    });\n\n                  case 12:\n                    _context.next = 14;\n                    break;\n\n                  case 14:\n                    _context.next = 18;\n                    break;\n\n                  case 16:\n                    _context.prev = 16;\n                    _context.t0 = _context[\"catch\"](0);\n\n                  case 18:\n                  case \"end\":\n                    return _context.stop();\n                }\n              }\n            }, _callee, null, [[0, 16]]);\n          }));\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked);\n}\n\nexport default function rootSaga() {\n  return _regeneratorRuntime.wrap(function rootSaga$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return all([fork(getRateSaga)]);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked2);\n}","map":{"version":3,"sources":["/home/user/mb-frontend/store/rate/saga.js"],"names":["getRateSaga","rootSaga","actions","takeLatest","put","all","fork","getRateService","GET_RATE_REQUEST","res","status","list","data","sort","date_1","date_2","created_at","sortData","i","type","GET_RATE_RESPONSE"],"mappings":";;;;;yBAIUA,W;;;yBAsBeC,Q;;;;;;AA1BzB,OAAOC,OAAP,MAAoB,WAApB;AACA,SAASC,UAAT,EAAqBC,GAArB,EAA0BC,GAA1B,EAA+BC,IAA/B,QAA2C,oBAA3C;AACA,SAASC,cAAT,QAA+B,qBAA/B;;AAEA,SAAUP,WAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACE,iBAAMG,UAAU,CAACD,OAAO,CAACM,gBAAT;AAAA;AAAA,mCAA2B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAE3B,2BAAMD,cAAc,EAApB;;AAF2B;AAEjCE,oBAAAA,GAFiC;;AAAA,0BAGnCA,GAAG,CAACC,MAAJ,KAAe,GAHoB;AAAA;AAAA;AAAA;;AAIjCC,oBAAAA,IAJiC,GAI1B,EAJ0B;AAAA;AAKpB,2BAAMF,GAAG,CAACG,IAAJ,CAASC,IAAT,CACrB,UAACC,MAAD,EAASC,MAAT;AAAA,6BAAoBA,MAAM,CAACC,UAAP,GAAoBF,MAAM,CAACE,UAA/C;AAAA,qBADqB,CAAN;;AALoB;AAK/BC,oBAAAA,QAL+B;;AAQrC,yBAASC,CAAT,GAAa,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AAC1BP,sBAAAA,IAAI,qBAAQA,IAAR,MAAiBM,QAAQ,CAACC,CAAD,CAAzB,CAAJ;AACD;;AAVoC;AAWrC,2BAAMd,GAAG,CAAC;AAAEe,sBAAAA,IAAI,EAAEjB,OAAO,CAACkB,iBAAhB;AAAmCR,sBAAAA,IAAI,EAAED;AAAzC,qBAAD,CAAT;;AAXqC;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAA3B,EAAhB;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAsBA,eAAe,SAAUV,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACb,iBAAMI,GAAG,CAAC,CAACC,IAAI,CAACN,WAAD,CAAL,CAAD,CAAT;;AADa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import actions from './actions';\nimport { takeLatest, put, all, fork } from 'redux-saga/effects';\nimport { getRateService } from '../../services/rate';\n\nfunction* getRateSaga() {\n  yield takeLatest(actions.GET_RATE_REQUEST, function*() {\n    try {\n      const res = yield getRateService();\n      if (res.status === 200) {\n        let list = {};\n        const sortData = yield res.data.sort(\n          (date_1, date_2) => date_2.created_at - date_1.created_at\n        );\n        for (let i = 0; i < 1; i++) {\n          list = { ...list, ...sortData[i] };\n        }\n        yield put({ type: actions.GET_RATE_RESPONSE, data: list });\n      } else {\n        // console.log(res);\n      }\n    } catch (error) {\n      // console.log(error);\n    }\n  });\n}\n\nexport default function* rootSaga() {\n  yield all([fork(getRateSaga)]);\n}\n"]},"metadata":{},"sourceType":"module"}