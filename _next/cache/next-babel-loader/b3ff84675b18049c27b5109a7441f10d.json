{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport Action from './actions';\nconst initialState = {\n  listNewsByCategory: {}\n};\n\nconst newReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case Action.FILL_NEWS_BY_CATEGORY_RESPONSE:\n      return _objectSpread({}, state, {\n        listNewsByCategory: action.data\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default newReducer;","map":{"version":3,"sources":["/home/user/mb-frontend/store/news/reducers.js"],"names":["Action","initialState","listNewsByCategory","newReducer","state","action","type","FILL_NEWS_BY_CATEGORY_RESPONSE","data"],"mappings":";;;;;;AAAA,OAAOA,MAAP,MAAmB,WAAnB;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,kBAAkB,EAAE;AADD,CAArB;;AAIA,MAAMC,UAAU,GAAG,CAACC,KAAK,GAAGH,YAAT,EAAuBI,MAAvB,KAAkC;AACnD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKN,MAAM,CAACO,8BAAZ;AACE,+BACKH,KADL;AAEEF,QAAAA,kBAAkB,EAAEG,MAAM,CAACG;AAF7B;;AAKF;AACE,aAAOJ,KAAP;AARJ;AAUD,CAXD;;AAaA,eAAeD,UAAf","sourcesContent":["import Action from './actions';\n\nconst initialState = {\n  listNewsByCategory: {}\n};\n\nconst newReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case Action.FILL_NEWS_BY_CATEGORY_RESPONSE:\n      return {\n        ...state,\n        listNewsByCategory: action.data\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default newReducer;\n"]},"metadata":{},"sourceType":"module"}