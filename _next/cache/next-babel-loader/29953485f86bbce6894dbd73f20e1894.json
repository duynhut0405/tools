{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(getNewByCategorySaga),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(rootSaga);\n\nimport actions from './actions';\nimport { findAllByCategory } from '../../services/news';\nimport { takeLatest, put, all, fork } from 'redux-saga/effects';\n\nfunction getNewByCategorySaga() {\n  return _regeneratorRuntime.wrap(function getNewByCategorySaga$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest(actions.FILL_NEWS_BY_CATEGORY_REQUEST,\n          /*#__PURE__*/\n          _regeneratorRuntime.mark(function _callee(params) {\n            var id, page, year, res;\n            return _regeneratorRuntime.wrap(function _callee$(_context) {\n              while (1) {\n                switch (_context.prev = _context.next) {\n                  case 0:\n                    id = params.id, page = params.page, year = params.year;\n                    _context.prev = 1;\n                    _context.next = 4;\n                    return findAllByCategory(id, page, year);\n\n                  case 4:\n                    res = _context.sent;\n\n                    if (!(res.status === 200)) {\n                      _context.next = 10;\n                      break;\n                    }\n\n                    _context.next = 8;\n                    return put({\n                      type: actions.FILL_NEWS_BY_CATEGORY_RESPONSE,\n                      data: res.data\n                    });\n\n                  case 8:\n                    _context.next = 10;\n                    break;\n\n                  case 10:\n                    _context.next = 14;\n                    break;\n\n                  case 12:\n                    _context.prev = 12;\n                    _context.t0 = _context[\"catch\"](1);\n\n                  case 14:\n                  case \"end\":\n                    return _context.stop();\n                }\n              }\n            }, _callee, null, [[1, 12]]);\n          }));\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked);\n}\n\nexport default function rootSaga() {\n  return _regeneratorRuntime.wrap(function rootSaga$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return all([fork(getNewByCategorySaga)]);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked2);\n}","map":null,"metadata":{},"sourceType":"module"}