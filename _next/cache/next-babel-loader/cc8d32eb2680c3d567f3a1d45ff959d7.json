{"ast":null,"code":"import actions from './actions';\nimport { takeLatest, put, all, fork } from 'redux-saga/effects';\nimport { getNewCategoryIdService } from '../../services/news';\n\nfunction* getNewSaga() {\n  yield takeLatest(actions.GET_NEW_INVESTOR_REQUEST, function* (params) {\n    const {\n      id\n    } = params;\n\n    try {\n      const res = yield getNewCategoryIdService(id);\n\n      if (res.status === 200) {\n        yield put({\n          type: actions.GET_NEW_INVESTOR_RESPONSE,\n          data: res.data\n        });\n      } else {// console.log(res);\n      }\n    } catch (error) {// console.log(error);\n    }\n  });\n}\n\nfunction* getNotifiactionSaga() {\n  yield takeLatest(actions.GET_NEW_INVESTOR_NOTIFICATION_REQUEST, function* (params) {\n    const {\n      id\n    } = params;\n\n    try {\n      const res = yield getNewCategoryIdService(id);\n\n      if (res.status === 200) {\n        yield put({\n          type: actions.GET_NEW_INVESTOR_NOTIFICATION_RESPONSE,\n          data: res.data\n        });\n      } else {// console.log(res);\n      }\n    } catch (error) {// console.log(error);\n    }\n  });\n}\n\nexport default function* rootSaga() {\n  yield all([fork(getNewSaga), fork(getNotifiactionSaga)]);\n}","map":{"version":3,"sources":["/home/user/mb-frontend/store/investors/saga.js"],"names":["actions","takeLatest","put","all","fork","getNewCategoryIdService","getNewSaga","GET_NEW_INVESTOR_REQUEST","params","id","res","status","type","GET_NEW_INVESTOR_RESPONSE","data","error","getNotifiactionSaga","GET_NEW_INVESTOR_NOTIFICATION_REQUEST","GET_NEW_INVESTOR_NOTIFICATION_RESPONSE","rootSaga"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,WAApB;AACA,SAASC,UAAT,EAAqBC,GAArB,EAA0BC,GAA1B,EAA+BC,IAA/B,QAA2C,oBAA3C;AACA,SAASC,uBAAT,QAAwC,qBAAxC;;AAEA,UAAUC,UAAV,GAAuB;AACrB,QAAML,UAAU,CAACD,OAAO,CAACO,wBAAT,EAAmC,WAAUC,MAAV,EAAkB;AACnE,UAAM;AAAEC,MAAAA;AAAF,QAASD,MAAf;;AACA,QAAI;AACF,YAAME,GAAG,GAAG,MAAML,uBAAuB,CAACI,EAAD,CAAzC;;AACA,UAAIC,GAAG,CAACC,MAAJ,KAAe,GAAnB,EAAwB;AACtB,cAAMT,GAAG,CAAC;AAAEU,UAAAA,IAAI,EAAEZ,OAAO,CAACa,yBAAhB;AAA2CC,UAAAA,IAAI,EAAEJ,GAAG,CAACI;AAArD,SAAD,CAAT;AACD,OAFD,MAEO,CACL;AACD;AACF,KAPD,CAOE,OAAOC,KAAP,EAAc,CACd;AACD;AACF,GAZe,CAAhB;AAaD;;AACD,UAAUC,mBAAV,GAAgC;AAC9B,QAAMf,UAAU,CAACD,OAAO,CAACiB,qCAAT,EAAgD,WAAUT,MAAV,EAAkB;AAChF,UAAM;AAAEC,MAAAA;AAAF,QAASD,MAAf;;AACA,QAAI;AACF,YAAME,GAAG,GAAG,MAAML,uBAAuB,CAACI,EAAD,CAAzC;;AACA,UAAIC,GAAG,CAACC,MAAJ,KAAe,GAAnB,EAAwB;AACtB,cAAMT,GAAG,CAAC;AAAEU,UAAAA,IAAI,EAAEZ,OAAO,CAACkB,sCAAhB;AAAwDJ,UAAAA,IAAI,EAAEJ,GAAG,CAACI;AAAlE,SAAD,CAAT;AACD,OAFD,MAEO,CACL;AACD;AACF,KAPD,CAOE,OAAOC,KAAP,EAAc,CACd;AACD;AACF,GAZe,CAAhB;AAaD;;AAED,eAAe,UAAUI,QAAV,GAAqB;AAClC,QAAMhB,GAAG,CAAC,CAACC,IAAI,CAACE,UAAD,CAAL,EAAmBF,IAAI,CAACY,mBAAD,CAAvB,CAAD,CAAT;AACD","sourcesContent":["import actions from './actions';\nimport { takeLatest, put, all, fork } from 'redux-saga/effects';\nimport { getNewCategoryIdService } from '../../services/news';\n\nfunction* getNewSaga() {\n  yield takeLatest(actions.GET_NEW_INVESTOR_REQUEST, function*(params) {\n    const { id } = params;\n    try {\n      const res = yield getNewCategoryIdService(id);\n      if (res.status === 200) {\n        yield put({ type: actions.GET_NEW_INVESTOR_RESPONSE, data: res.data });\n      } else {\n        // console.log(res);\n      }\n    } catch (error) {\n      // console.log(error);\n    }\n  });\n}\nfunction* getNotifiactionSaga() {\n  yield takeLatest(actions.GET_NEW_INVESTOR_NOTIFICATION_REQUEST, function*(params) {\n    const { id } = params;\n    try {\n      const res = yield getNewCategoryIdService(id);\n      if (res.status === 200) {\n        yield put({ type: actions.GET_NEW_INVESTOR_NOTIFICATION_RESPONSE, data: res.data });\n      } else {\n        // console.log(res);\n      }\n    } catch (error) {\n      // console.log(error);\n    }\n  });\n}\n\nexport default function* rootSaga() {\n  yield all([fork(getNewSaga), fork(getNotifiactionSaga)]);\n}\n"]},"metadata":{},"sourceType":"module"}