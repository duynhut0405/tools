{"ast":null,"code":"import actions from './actions';\nimport { findAllByCategory } from '../../services/news';\nimport { takeLatest, put, all, fork } from 'redux-saga/effects';\n\nfunction* getNewByCategorySaga() {\n  yield takeLatest(actions.FILL_NEWS_BY_CATEGORY_REQUEST, function* (params) {\n    const {\n      id,\n      page,\n      year\n    } = params;\n\n    try {\n      const res = yield findAllByCategory(id, page, year);\n\n      if (res.status === 200) {\n        yield put({\n          type: actions.FILL_NEWS_BY_CATEGORY_RESPONSE,\n          data: res.data\n        });\n      } else {// console.log(res);\n      }\n    } catch (error) {// console.log(error);\n    }\n  });\n}\n\nexport default function* rootSaga() {\n  yield all([fork(getNewByCategorySaga)]);\n}","map":{"version":3,"sources":["F:/MGROUP/MBnextjs/mb-frontend/store/news/saga.js"],"names":["actions","findAllByCategory","takeLatest","put","all","fork","getNewByCategorySaga","FILL_NEWS_BY_CATEGORY_REQUEST","params","id","page","year","res","status","type","FILL_NEWS_BY_CATEGORY_RESPONSE","data","error","rootSaga"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,WAApB;AACA,SAASC,iBAAT,QAAkC,qBAAlC;AACA,SAASC,UAAT,EAAqBC,GAArB,EAA0BC,GAA1B,EAA+BC,IAA/B,QAA2C,oBAA3C;;AAEA,UAAUC,oBAAV,GAAiC;AAC/B,QAAMJ,UAAU,CAACF,OAAO,CAACO,6BAAT,EAAwC,WAAUC,MAAV,EAAkB;AACxE,UAAM;AAAEC,MAAAA,EAAF;AAAMC,MAAAA,IAAN;AAAYC,MAAAA;AAAZ,QAAqBH,MAA3B;;AACA,QAAI;AACF,YAAMI,GAAG,GAAG,MAAMX,iBAAiB,CAACQ,EAAD,EAAKC,IAAL,EAAWC,IAAX,CAAnC;;AACA,UAAIC,GAAG,CAACC,MAAJ,KAAe,GAAnB,EAAwB;AACtB,cAAMV,GAAG,CAAC;AACRW,UAAAA,IAAI,EAAEd,OAAO,CAACe,8BADN;AAERC,UAAAA,IAAI,EAAEJ,GAAG,CAACI;AAFF,SAAD,CAAT;AAID,OALD,MAKO,CACL;AACD;AACF,KAVD,CAUE,OAAOC,KAAP,EAAc,CACd;AACD;AACF,GAfe,CAAhB;AAgBD;;AAED,eAAe,UAAUC,QAAV,GAAqB;AAClC,QAAMd,GAAG,CAAC,CAACC,IAAI,CAACC,oBAAD,CAAL,CAAD,CAAT;AACD","sourcesContent":["import actions from './actions';\r\nimport { findAllByCategory } from '../../services/news';\r\nimport { takeLatest, put, all, fork } from 'redux-saga/effects';\r\n\r\nfunction* getNewByCategorySaga() {\r\n  yield takeLatest(actions.FILL_NEWS_BY_CATEGORY_REQUEST, function*(params) {\r\n    const { id, page, year } = params;\r\n    try {\r\n      const res = yield findAllByCategory(id, page, year);\r\n      if (res.status === 200) {\r\n        yield put({\r\n          type: actions.FILL_NEWS_BY_CATEGORY_RESPONSE,\r\n          data: res.data\r\n        });\r\n      } else {\r\n        // console.log(res);\r\n      }\r\n    } catch (error) {\r\n      // console.log(error);\r\n    }\r\n  });\r\n}\r\n\r\nexport default function* rootSaga() {\r\n  yield all([fork(getNewByCategorySaga)]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}